---
layout: post
title: "[백준] 1012번 유기농 배추"
subtitle: ""
categories: [Algorithm/Solving]
tags: [BFS,DFS]
comments: true
---

> BFS,DFS

## 문제
---

차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다.

(한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있다고 간주한다)

한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다.

예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다.

(0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.)

## 입력
---

입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 그리고 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다.
## 출력
---

각 테스트 케이스에 대해 필요한 최소의 배추흰지렁이 마리 수를 출력한다.

## 풀이
---

BFS, DFS 두가지 방법으로 모두 풀 수 있다. 좌표위치를 헷갈리지 말아야한다.
주어진 테스트케이스가 여러개이기 때문에 사용한 배열을 반복해서 초기화해야한다. 이때 FOR문으로 초기화 시키는 것보다 cstring 헤더파일에 있는 <point>memset</point>을 사용해주면 된다.
```
void* memset(void* ptr, int value, size_t num);
```

## 코드
---

사용언어: C++
> DFS

```cpp
#include <iostream>
#include <cstring> //memset
using namespace std;
#define MAX 50 //50인 경우

int graph[MAX][MAX];
bool visited[MAX][MAX];
int N, M;

int dirx[4] = {0, 0, -1, 1};
int diry[4] = {1, -1, 0, 0};

void DFS(int x, int y)
{
    visited[x][y] = true;
    int nx, ny;

    for (int i = 0; i < 4; i++)
    {
        nx = x + dirx[i];
        ny = y + diry[i];

        if (0 <= nx && nx < N && 0 <= ny && ny < M)
            if (graph[nx][ny] == 1 && !visited[nx][ny])
                DFS(nx, ny);
    }
}

int main()
{
    //테스트케이스 개수 \n 가로, 세로, 배추 갯수
    int T, K;
    int temp_x, temp_y;
    int cnt = 0;

    cin >> T;
    while (T--) // 테스트케이스만큼 반복
    {
        cnt = 0;
        memset(graph, 0, sizeof(graph));
        memset(visited, 0, sizeof(visited));

        cin >> M >> N >> K;

        for (int j = 0; j < K; j++) // 배추 위치
        {
            cin >> temp_x >> temp_y;
            graph[temp_y][temp_x] = 1; // x,y 평면 좌표 (코드는 행렬)
        }

        for (int k = 0; k < N; k++)
        {
            for (int l = 0; l < M; l++)
            {
                if (graph[k][l] == 1 && !visited[k][l])
                {
                    DFS(k, l);
                    cnt++;
                }
            }
        }
        cout << cnt << endl;
    }

    return 0;
}
```
> BFS

```cpp
#include <iostream>
#include <cstring> //memset
#include <queue>
#include <stdio.h>
using namespace std;
#define MAX 50

int graph[MAX][MAX];
bool visited[MAX][MAX];
int N, M;
int cnt = 0;
int dirx[4] = {0, 0, -1, 1};
int diry[4] = {1, -1, 0, 0};

void BFS(int x, int y)
{
    queue<pair<int, int>> q;
    q.push(make_pair(x, y));

    visited[x][y] = true;

    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = x + dirx[i];
            int ny = y + diry[i];

            if (0 <= nx && nx < N && 0 <= ny && ny < M)
                if (graph[nx][ny] && !visited[nx][ny])
                {
                    visited[nx][ny] = true;
                    q.push(make_pair(nx, ny));
                }
        }
    }
}

int main()
{
    //테스트케이스 개수 \n 가로, 세로, 배추 갯수
    int T, K;
    int temp_x, temp_y;
    int cnt = 0;

    cin >> T;
    while (T--) // 테스트케이스만큼 반복
    {
        cnt = 0;
        memset(graph, 0, sizeof(graph));
        memset(visited, 0, sizeof(visited));

        scanf("%d %d %d", &M, &N, &K);

        for (int j = 0; j < K; j++) // 배추 위치
        {

            scanf("%d %d", &temp_x, &temp_y);
            graph[temp_y][temp_x] = 1; //시작점이 왼쪽 상단
        }

        for (int k = 0; k < N; k++)
        {
            for (int l = 0; l < M; l++)
            {
                if (graph[k][l] == 1 && !visited[k][l])
                {
                    BFS(k, l);
                    cnt++;
                }
            }
        }
        cout << cnt << endl;
    }

    return 0;
}
```
## 출처
---

* [백준](https://www.acmicpc.net/problem/1012)