---
layout: post
title: "[백준] 2156번 포도주 시식"
subtitle: ""
categories: [Algorithm/Solving]
tags: [ DP]
comments: true
---

> DP

## 문제
---

효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.

1. 포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
2. 연속으로 놓여 있는 3잔을 모두 마실 수는 없다.


효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오. 

예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.

## 풀이
---

> <subtitle>점화식 구하기

기준을 현재 차례에서 먹었는지, 안먹은지로 따져야한다

처음에 이전 계단 오르기 문제와 같이 풀었다가 한번에 한칸 이상 뛰어넘을 수 있다는 걸 생각못했다

1. 지금 차례에서 먹은 경우
   1. 지금 차례에서 먹고, 전 차례에서 먹은 경우: i-2번째 잔을 마시면 안된다. <point>DP[i-3]+grape[i-1]+grape[i] </point>
   2. 지금 차례에서 먹고, 전 차례에서 안마신 경우:<point>grape[i]+DP[i-2]</point>
2.  지금 차례에서 안 마신 경우: <point>DP[i-1]</point>  


따라서 점화식은 
```
dp[i] = max({dp[i - 1], dp[i - 2] + grape[i], dp[i - 3] + grape[i - 1] + grape[i]});
```

## 코드
---

사용언어: C++
```cpp
#include <iostream>
#include <stdio.h>
#include <algorithm>
#define MAX 10000
using namespace std;

int grape[MAX];
int dp[MAX];
//0은 연속해서, 1은 한칸 뛰어서

int DP(int n)
{
    dp[0] = 0;
    dp[1] = grape[1];
    dp[2] = grape[1] + grape[2];

    for (int i = 3; i <= n; i++)
    {
        dp[i] = max({dp[i - 1], dp[i - 2] + grape[i], dp[i - 3] + grape[i - 1] + grape[i]});
    }
    return dp[n];
}

int main()
{
    int N;
    scanf("%d", &N);
    for (int i = 1; i <= N; i++)
    {
        scanf("%d", &grape[i]);
    }
    cout << DP(N) << endl;
}
```

## 출처
* [백준](https://www.acmicpc.net/problem/2156)