---
layout: post
title: "[백준] 1697번 숨바꼭질"
subtitle: ""
categories: [Algorithm/Solving]
tags: [BFS]
comments: true
---

> BFS

---

## 문제
---

수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

## 풀이
---

BFS문제는 queue를 이용하고, 항상 범위와 VISITED 여부를 체크하는 것 잊지말 것!  그리고 BFS는 큐를 사용하기 때문에 최소경로인지 확인할 필요없이 가장 빨리 도달한 것이 최솟값이다.


## 코드
---

사용언어: C++

```cpp
#include <iostream>
#include <queue>
#define MAX 100000
using namespace std;

int K;
queue<pair<int, int>> q;
int check[MAX + 1];
int min_ = 999999999;

void BFS()
{
    int x, y;
    string temp;
    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        //temp = q.front().second;
        q.pop();

        if (x != K)
        {
            if (x - 1 >= 0 && !check[x - 1])
            {
                check[x - 1] = true;
                q.push(make_pair(x - 1, y + 1));
            }
            if (x + 1 <= MAX && !check[x + 1])
            {
                check[x + 1] = true;
                q.push(make_pair(x + 1, y + 1));
            }
            if (x * 2 <= MAX && !check[2 * x])
            {
                check[x * 2] = true;
                q.push(make_pair(x * 2, y + 1));
            }
        }
        else
        {
            if (y < min_)
                min_ = y;
        }
    }
}

int main()
{
    int N;
    scanf("%d %d", &N, &K);
    if (N == K)
        cout << 0 << endl;
    else if ((N + 1 == K) || (N - 1 == K) || (N * 2 == K))
        cout << 1 << endl;
    else
    {
        q.push(make_pair(N, 0));
        BFS();

        cout << min_ << endl;
    }
}
```

## 출처
---

* [백준](https://www.acmicpc.net/problem/1697)