---
layout: post
title: "[백준] 7576번 토마토"
subtitle: ""
categories: [Algorithm/Solving]
tags: [BFS]
comments: true
---

> BFS


## 문제
---

철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자 모양 상자의 칸에 하나씩 넣어서 창고에 보관한다. 

![](https://www.acmicpc.net/upload/images/tmt.png)

창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지, 그 최소 일수를 알고 싶어 한다.

토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.

## 입력
---

첫 줄에는 상자의 크기를 나타내는 두 정수 M,N이 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M,N ≤ 1,000 이다. 둘째 줄부터는 하나의 상자에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 상자에 담긴 토마토의 정보가 주어진다. 하나의 줄에는 상자 가로줄에 들어있는 토마토의 상태가 M개의 정수로 주어진다. 정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 
## 출력
---

여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

## 풀이
---

![](https://postfiles.pstatic.net/MjAyMDAzMDVfMjY4/MDAxNTgzMzg3NjY4MjE4.8ayNhNxZyq7wvT2RldHOHuaMJOO-5Nibi4gIvqPyB8Ug.QH59htA79RXwaXYRPEI2FSi-q77ANXzcJzwK_WSgPHUg.PNG.rannan09/image.png?type=w966)

이 예제 3번은 양쪽에서 토마토가 동시에 익는 경우다.  두번째 코드가 곰곰히 고민하고 짠 코드인데, 정답은 나왔지만 시간초과가 떴다.  그 알고리즘은 우선 처음 1을 만나면 끝까지 토마토를 익힌다.  그럼 위의 코드에서 (2,5)는 9가 된다.  또 다시 방문하지 않은 1, 즉 마지막 1을 만나게 된다면 second값을 비교하며 다시 익혀나가는 방식으로 방문하지 않은 1을 만날 때마다 BFS를 사용했다.  시간초과가 뜨고 살짜쿵 멘붕이 왔지만 ~ 이럴 땐 질문 게시판을 살짝 참고하면 된다 ㅎㅎ

​굳이 매 출발지마다 BFS를 돌릴 필요가 없다는 힌트를 얻고 처음부터 모든 1을 큐에 집어 넣고 시작했다.  다른 BFS 문제들을 풀 때도, 동시에 시작하는 경우가 있다면 당황하지 않고 바로 큐에 집어 넣으면 된다.  기존에 내가 짰던 BFS를 그대로 사용해도 됐다.(다행)  내 BFS는 기존의 x,y의 second 값을 증가시키며 상하좌우에 넣기 때문에 아무 문제 없었다.

여기서 또 그냥 포문을 돌리기 싫었던 나는 온갖 알고리즘 헤더파일의 함수를 사용하였다 ^_^!<br>비록 내가 이차원 pair 배열을 선언해서 구글링을 오지게했지만,, 
* <point>fill_n</point>

[참고링크](https://namwhis.tistory.com/entry/C-%EB%B0%B0%EC%97%B4-%EC%B4%88%EA%B8%B0%ED%99%94-stdfill-stdfilln-%EC%A0%95%EB%A6%AC)
이분이 이차원배열에서도 fill_n을 어떻게 사용해야하는지 잘 정리해주셨다.이차원 pair 배열을 원하는 값으로 초기화해주기 위해선
```
fill_n(arr[0],size,make_pair(x,y)) 
```
이렇게 사용하면 된다!
* <point>max_element</point>

vector에서만 사용가능한 줄 알았는데 배열에서도 사용가능했다. 마찬가지로 find_if, find 함수도 전부 다 배열에서 사용가능하다! 다만 여기서 "->","."의 개념이 제대로 잡혀있지 않아 조금 헤맸다.잠깐 정리하자면 "."은 참조로 요소를 선택할 때고, "->"은 포인터로 요소를 선택할 때다.사실 아직까지 잘 모르겠고 그냥 "."썼는데 vscode에서 pointer 어쩌구~ 뜨면 그냥 "->"로 바꿔쓰면 된다ㅎ

* <point>Find_if</point>

이 함수는 compare함수 정의하는 거랑 같은 맥락이다. 원하는 값을 찾고 싶을 때, 조건을 걸고 싶으면 함수를 정의하면 된다.
처음엔 find(&map[0][0]->first,&map[N][M]->first,0)이렇게 사용했는데 second까지 다 탐색을 해버려서 find_if를 썼다. 값을 찾지 못하면 2번째 인자값, 즉 마지막 주소를 반환한다.map이 pair배열이므로 그에 따라 find_if의 결과값을 반환받는 zero도 pair로 선언해주어야한다.

## 코드
---

사용언어: C++

```cpp
#include <iostream>
#include <stdio.h>
#include <queue>
#include <algorithm>
#define MAX 1001

using namespace std;
bool visited[MAX][MAX];
pair<int, int> map[MAX][MAX];

int dirx[4] = {-1, 1, 0, 0};
int diry[4] = {0, 0, -1, 1};
int M, N;
int answer = 0;

void BFS(queue<pair<int, int>> q)
{
    int x, y;

    while (!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++)
        {
            int nx = x + dirx[i];
            int ny = y + diry[i];

            if (0 <= nx && nx < N && 0 <= ny && ny < M)
            {
                if (!map[nx][ny].first && !visited[nx][ny])
                {
                    map[nx][ny].first = 1;
                    map[nx][ny].second = map[x][y].second + 1;
                    visited[nx][ny] = true;
                    q.push(make_pair(nx, ny));
                }
            }
        }
    }
}
bool isEqual(pair<int, int> &element)
{
    return element.first == 0;
}

int main()
{
    queue<pair<int, int>> q;
    visited[MAX][MAX] = {
        false,
    };
    fill_n(map[0], MAX * MAX, make_pair(-1, 0)); //first값이 0이면 아래에서 찾을 때, 빈 공간에 할당된 값을 찾게된다.
    pair<int, int> *zero;

    scanf("%d %d", &M, &N);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
        {
            scanf("%d", &map[i][j]);
            if (map[i][j].first == 1) //map[i][j].first는 0이 아닌 모든 경우 들어간다. ex){-1,0,1,2}->{-1,1,2}
            {
                q.push(make_pair(i, j));
                visited[i][j] = true;
            }
        }
    BFS(q);

    answer = max_element(&map[0][0], &map[N][M])->second;
    zero = find_if(&(map[0][0]), &(map[N][M]), isEqual);

    if (zero != &(map[N][M])) //0이 존재할때
        answer = -1;

    cout << answer << endl;
}
```

## 출처
---

* [백준](https://www.acmicpc.net/problem/7576)