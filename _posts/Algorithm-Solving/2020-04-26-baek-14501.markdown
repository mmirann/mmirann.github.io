---
layout: post
title: "[백준] 14501번 퇴사"
subtitle: ""
categories: [Algorithm/Solving]
tags: [DP, DFS]
comments: true
---

> DP, DFS

# 문제

---

상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.

오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.

백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.

각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

N = 7인 경우에 다음과 같은 상담 일정표를 보자.

|     | 1일  | 2일  | 3일  | 4일  | 5일  | 6일  | 7일  |
| --- | --- | --- | --- | --- | --- | --- | --- |
| Ti  | 3   | 5   | 1   | 1   | 2   | 4   | 2   |
| Pi  | 10  | 20  | 10  | 20  | 15  | 40  | 200 |

1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.

상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.

또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.

퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.

상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.

## 풀이
---
이 문제는 DP, DFS 두가지 방법으로 풀 수 있다. 처음 생각한 방법은 DP다. 헷갈리기지 않게 문제를 시작하기 전에 기준을 어떻게 잡을 지 정하는 것이 중요하다. 나는 금액을 Ti 지난 날에 더하는 걸로 기준을 잡았다. DP는 점화식만 잘 설정하면 된다.

```c
DP[i] = max(DP[i - 1], DP[i]);
DP[i + T[i]] = max(DP[i + T[i]], DP[i] + P[i]);
```

처음에 <point>DP[i]에 들어갈 값을 정한다.</point> 이 때 DP[i-1]과 DP[i]의 값을 비교한다. 만약 이전에 P값이 미리 더해졌으면 해당 값이 들어갈 것이고, 그렇지 않으면 0과 DP[i-1]값이 비교되어 DP[i-1]이 들어갈 것이다.

그리고 이제 <point>i의 시간과 금액을 더할지 말지 결정한다.</point>DP[i+T[i]] 즉, 현재 i에서 그 시간만큼 더해진 날의 최댓값과 현재 최댓값에 금액(p[i])을 더한 값 중에 큰 값을 취하게 된다.

DFS는 초기 인덱스 값을 정하는 게 중요하다. 어렵지 않게 i, sum 모두 0으로 시작한다.
if문에서 i가 N인 경우에 모든 경우의 수를 판단하여 최댓값을 취하게 된다. 주어진 문제의 경우 최댓값이 16정도로 작은 수였기 때문에 무리없이 DFS를 사용할 수 있었다.


## 코드
---
DP

사용언어: C++

```cpp
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;
#define MAX 16
int T[MAX] = {0};
int P[MAX] = {0};

int solution(int N)
{
    int temp_sum = 0;
    int DP[N + 1] = {0};
    DP[0] = 0;
    DP[T[0]] = P[0];

    for (int i = 1; i < N; i++)
    {
        if (N - i >= T[i]) //실현 가능한지
        {
            DP[i] = max(DP[i - 1], DP[i]);
            DP[i + T[i]] = max(DP[i + T[i]], DP[i] + P[i]);
        }
    }

    return *max_element(DP, DP + N + 1);
}

int main()
{
    int N, t1, t2;

    scanf("%d", &N);
    for (int i = 0; i < N; i++)
    {
        scanf("%d %d", &T[i], &P[i]);
    }
    cout << solution(N) << endl;
}
```

> DFS

```cpp
#include <iostream>
#include <stdio.h>
using namespace std;
#define MAX 16
//commit test
int T[MAX] = {0};
int P[MAX] = {0};
int N;
int ans;
void DFS(int i, int sum)
{
    if (i == N)
    {
        ans = max(ans, sum);
        return;
    }
    DFS(i + 1, sum);   //건너뛴 경우
    if (N - i >= T[i]) //실현 가능한지
    {
        DFS(i + T[i], sum + P[i]);
    }
}

int main()
{
    int t1, t2;
    scanf("%d", &N);
    for (int i = 0; i < N; i++)
    {
        scanf("%d %d", &T[i], &P[i]);
    }
    DFS(0, 0);
    cout << ans << endl;

    return 0;
}
```

